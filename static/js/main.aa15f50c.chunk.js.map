{"version":3,"sources":["Firebase.js","Header.js","SearchResults.js","AddSchool.js","Favourite.js","Favourites.js","Footer.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Header","setRedirect","setState","redirect","renderRedirect","state","exact","to","favouriteLength","database","ref","on","data","favouriteSchool","favouritesObject","val","Favourites","newFavouriteArray","favourite","push","favouritesLength","length","this","props","radiusHandler","schoolHandler","handleCityInput","handleCountryInput","submitHandler","action","onSubmit","className","onChange","type","placeholder","id","required","htmlFor","name","value","onClick","activeClassName","Component","mapboxgl","workerClass","require","default","accessToken","SearchResults","removeSchool","schoolRef","child","remove","Swal","fire","title","text","icon","confirmButtonText","handleAddFav","address","dbFavouritesRef","schoolName","schoolAddress","schoolNotes","savedSchool","map","currentCoordinates","lng","lat","zoom","sectionRef","React","createRef","coordinates","location","current","scrollIntoView","Map","container","mapContainer","style","center","filterButtons","document","getElementById","listedSearchResults","getElementsByClassName","resultsArray","addEventListener","event","target","classList","toggle","forEach","result","getAttribute","textContent","schoolResults","point","marker","Marker","color","markerColor","setLngLat","setPopup","Popup","setHTML","formattedAddress","addTo","markerDiv","getElement","setAttribute","togglePopup","cursor","e","coord","_lngLat","flyTo","schoolsAdded","schoolType","getCenter","toFixed","getZoom","input","i","contains","userCityInput","userCountryInput","newSchoolObj","data-type","join","schoolObj","el","filters","AddSchool","addSchool","preventDefault","schoolFormattedAddress","street","city","province","postalCode","country","dbRef","userNewSchool","schoolNote","updateAddress","property","checked","Favourite","handleAddNotes","schoolId","update","school","favourites","userFavourite","favouritesArray","notes","Fragment","Footer","href","mapSearches","searchResults","filterOptions","App","getData","mapData","cityInput","countryInput","setTimeout","categoriesToSearch","fireBaseCall","scrollTo","handleSubmit","newSchool","directMeHome","handleRadius","radius","schoolTypeId","isActive","mapLocations","longLatLocations","locationCoordinates","scroller","duration","delay","smooth","newSchoolArray","newSchoolObject","formatFirebaseData","NewSchools","userSchoolMapData","query","eachSchool","geoCodeCall","then","res","features","catch","err","ourLocation","geometry","console","log","axios","method","responseType","url","params","access_token","userSchoolType","filter","object","addedSchoolCity","toLowerCase","addedSchoolCountry","includes","client_id","client_secret","near","categoryId","v","filteredArray","dataArray","categories","ourCategoryFilter","response","venues","queries","apiCall","path","render","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.aa15f50c.chunk.js","sourcesContent":["\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCx_22IVNfxHM8TyjNoRqbqbf30j2flMgU\",\r\n    authDomain: \"collegenavigator-40c76.firebaseapp.com\",\r\n    projectId: \"collegenavigator-40c76\",\r\n    storageBucket: \"collegenavigator-40c76.appspot.com\",\r\n    messagingSenderId: \"497329332909\",\r\n    appId: \"1:497329332909:web:c15591a2de202a9fe99c24\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import { Component } from 'react';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport firebase from './Firebase'\r\n\r\n\r\n\r\nclass Header extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state={\r\n            favouriteLength:[],\r\n            redirect: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        //grabs favourites schools from firebase to calculate # for display\r\n        const dbRef = firebase.database().ref();\r\n\r\n        dbRef.on('value', (data) => {\r\n            const firebaseDataObj = data.val();\r\n            const favouritesObject = firebaseDataObj.Favourites;\r\n            let newFavouriteArray = [];\r\n            let favouriteSchool;\r\n\r\n            for (let favourite in favouritesObject) {\r\n                favouriteSchool = favouritesObject[favourite];\r\n                newFavouriteArray.push(favouriteSchool);\r\n            }\r\n\r\n            this.setState({\r\n                favouritesLength: newFavouriteArray.length - 1\r\n            })\r\n        })\r\n    }\r\n\r\n    setRedirect = () => {\r\n        this.setState({\r\n            redirect:true\r\n        })\r\n    }\r\n\r\n    renderRedirect = () => {\r\n        if(this.state.redirect) {\r\n            this.setState({\r\n                redirect: false\r\n            })\r\n            return <Redirect exact to=\"/searchResults\" />\r\n        }\r\n    }\r\n\r\n    render() {    \r\n    const { schoolHandler, radiusHandler, handleCityInput, handleCountryInput, submitHandler } = this.props;\r\n        return (\r\n            <header>\r\n                <h1>College Navigator</h1>\r\n                <form action='submit' onSubmit={submitHandler}>\r\n                    <div className=\"wrapper\">\r\n\r\n                    \r\n                    <div className=\"cityInputs\">\r\n                    <input onChange={handleCityInput} type=\"text\" placeholder='City' id='citySearch' required/>\r\n                    <label className='srOnly' htmlFor=\"citySearch\">Please enter a city to search</label>\r\n\r\n                    <input onChange={handleCountryInput} type=\"text\" placeholder='Province/State OR Country' id='countrySearch' required/>\r\n                    <label className=\"srOnly\" htmlFor=\"countrySearch\">Please enter the country the city is in</label>\r\n                    </div>\r\n                    \r\n                    <div className=\"radiusInputs\">\r\n                        <legend>Search Radius</legend>\r\n                        <div>\r\n                            <input onChange={radiusHandler} type=\"radio\" id='shortRadius' name='radius' value='5000' required/>\r\n                            <label htmlFor=\"shortRadius\">5KM</label>\r\n                            <input onChange={radiusHandler} type=\"radio\" id='mediumRadius' name='radius' value='10000' />\r\n                            <label htmlFor=\"mediumRadius\">10KM</label>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <input onChange={radiusHandler} type=\"radio\" id='longRadius' name='radius' value='25000' />\r\n                            <label htmlFor=\"longRadius\">25KM</label>\r\n                            <input onChange={radiusHandler} type=\"radio\" id='xlongRadius' name='radius' value='50000' />\r\n                            <label htmlFor=\"xlongRadius\">50KM</label>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    {/* <div className=\"schoolTypeInputs\">\r\n                        <legend>School Type</legend>\r\n                        <input onChange={schoolHandler} type=\"radio\" id='university' name='schoolType' value='4bf58dd8d48988d1ae941735' />\r\n                        <label htmlFor=\"university\">University</label>\r\n                        <input onChange={schoolHandler} type=\"radio\" id='college' name='schoolType' value='4bf58dd8d48988d1a2941735' />\r\n                        <label htmlFor=\"college\">College</label>\r\n                        <div>\r\n                            <input onChange={schoolHandler} type=\"radio\" id='tradeSchool' name='schoolType' value='4bf58dd8d48988d1ad941735' />\r\n                            <label htmlFor=\"tradeSchool\">Trade School</label>\r\n                        </div>\r\n                    </div> */}\r\n                    {this.renderRedirect()}\r\n                    <button onClick={this.setRedirect}>Find Schools!</button>\r\n                    </div>\r\n                </form>\r\n                <nav>\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink activeClassName=\"active\" to=\"/searchResults\">Home</NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink activeClassName=\"active\" to=\"/favourites\">Favourite Schools ({this.state.favouritesLength})</NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink activeClassName=\"active\" to=\"/addSchool\">Add School</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport firebase from './Firebase.js';\r\nimport Swal from 'sweetalert2';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\r\n\r\nmapboxgl.accessToken = `pk.eyJ1IjoiaGFycnlndWxvaWVuIiwiYSI6ImNrazQ2bmFuYTE2c2MydnBiZW5mcDVnaHYifQ.QPjai4qdHOKRY8qHYt1QVw`;\r\n\r\nclass SearchResults extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            savedSchool: {\r\n                schoolName: '',\r\n                schoolAddress: [],\r\n                map: false,\r\n                currentCoordinates: []\r\n            },\r\n            lng: 5,\r\n            lat: 34,\r\n            zoom: 2\r\n        }\r\n\r\n        this.sectionRef = React.createRef();\r\n        \r\n    }\r\n\r\n\r\n   \r\n\r\n\r\n    componentDidMount() {\r\n        \r\n        \r\n\r\n        let coordinates = [this.props.location[0], this.props.location[1]];\r\n        this.sectionRef.current.scrollIntoView();\r\n        let map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: coordinates,\r\n            zoom: 11\r\n        });\r\n\r\n        this.setState({\r\n            currentCoordinates: coordinates\r\n        })\r\n\r\n        \r\n        // let tradeLayer = [];\r\n        // let uniLayer = [];\r\n        // let CollegeLayer = [];\r\n        // this.props.mapPoints.forEach(point => {\r\n\r\n        //     const pointMarker =  {\"geojson-marker\": {\r\n        //             \"type\": \"geojson\",\r\n        //             \"data\": {\r\n        //                 \"type\": \"Feature\",\r\n        //                 \"geometry\": {\r\n        //                     \"type\": \"Point\",\r\n        //                     \"coordinates\": [point.location.lng, point.location.lat]\r\n        //                 },\r\n        //                 \"properties\": {\r\n        //                     \"title\": point.name,\r\n        //                     // \"marker-symbol\": appointedMarker,\r\n        //                     // \"schoolType\": schoolType\r\n        //                 }\r\n        //             }\r\n        //         }\r\n        //     }\r\n        //     console.timeLog(pointMarker);\r\n        // })\r\n        \r\n\r\n        map.on('load', () => {\r\n\r\n            const filterButtons = document.getElementById('filterList')\r\n            let listedSearchResults = document.getElementsByClassName('schoolResults');\r\n            let resultsArray = [...listedSearchResults];\r\n\r\n            filterButtons.addEventListener('click', function (event) {\r\n               \r\n                event.target.classList.toggle('selectedFilter');\r\n                resultsArray.forEach(result => {\r\n                    if (result.getAttribute('data-type') === event.target.textContent) {\r\n                        result.classList.toggle('visible')\r\n                    }\r\n                })\r\n            })\r\n            \r\n            if(this.props.schoolResults) {\r\n                //for each set of coordinates do this and pass coordinates to setlnglat\r\n                this.props.schoolResults.forEach(point => {\r\n                    \r\n                    const marker = new mapboxgl.Marker({\r\n                        type: point.type,\r\n                        color: point.markerColor\r\n                    })  .setLngLat([point.location.lng, point.location.lat])\r\n                        .setPopup(new mapboxgl.Popup().setHTML(`<h4>${point.name}</h4><p>${point.location.formattedAddress}</p>`))\r\n                        .addTo(map);\r\n                    \r\n                    const markerDiv = marker.getElement();\r\n                    //add type attribute to each marker node for filtering\r\n                    markerDiv.setAttribute('data-type', `${point.type}`)\r\n                    \r\n                    markerDiv.addEventListener('mouseenter', () => marker.togglePopup());\r\n                    markerDiv.addEventListener('mouseleave', () => marker.togglePopup());\r\n                    markerDiv.style.cursor=\"pointer\";\r\n                    markerDiv.addEventListener('click', (e) => {\r\n                        \r\n                        coordinates = [];\r\n                        for(let coord in marker._lngLat){\r\n                            coordinates.push(marker._lngLat[coord]);\r\n                        }\r\n\r\n                        this.setState({\r\n                            map: true,\r\n                            currentCoordinates: coordinates\r\n                        })\r\n                        \r\n                      \r\n                        map.flyTo({\r\n                            center: this.state.currentCoordinates,\r\n                            zoom: 14\r\n                        })\r\n                        \r\n                    })\r\n                    \r\n                    \r\n                     //on filter click, compare filter text to data-type attribute on marker&search result to toggle visibility (via class)\r\n                     filterButtons.addEventListener('click', function (event) {\r\n                         \r\n                         if (markerDiv.getAttribute('data-type') === event.target.textContent) {\r\n                             markerDiv.classList.toggle('visible')\r\n                         }\r\n                     });\r\n                })\r\n            }\r\n            this.props.schoolsAdded.forEach(point => {\r\n                let marker = new mapboxgl.Marker()\r\n                    .setLngLat([point.coordinates[0], point.coordinates[1]])\r\n                    .setPopup(new mapboxgl.Popup().setHTML(`<h4>${point.schoolName}</h4><p>${point.schoolAddress}</p>` ))\r\n                    .addTo(map);\r\n    \r\n                const markerDiv = marker.getElement();\r\n\r\n                markerDiv.setAttribute('data-type', `${point.schoolType}`)\r\n                \r\n                markerDiv.addEventListener('mouseenter', () => marker.togglePopup());\r\n                markerDiv.addEventListener('mouseleave', () => marker.togglePopup());\r\n                markerDiv.style.cursor = \"pointer\";\r\n                markerDiv.addEventListener('click', (e) => {\r\n                    coordinates = [];\r\n                    \r\n                    for (let coord in marker._lngLat) {\r\n                        coordinates.push(marker._lngLat[coord]);\r\n                    }\r\n                    \r\n                    this.setState({\r\n                        map: true,\r\n                        currentCoordinates: coordinates\r\n                    })\r\n\r\n\r\n                    map.flyTo({\r\n                        center: this.state.currentCoordinates,\r\n                        zoom: 14\r\n                    })\r\n                })\r\n            })\r\n    \r\n    \r\n    \r\n            map.on('move', () => {\r\n                this.setState({\r\n                    lng: map.getCenter().lng.toFixed(4),\r\n                    lat: map.getCenter().lat.toFixed(4),\r\n                    zoom: map.getZoom().toFixed(2)\r\n                });\r\n            });\r\n           \r\n        })\r\n        \r\n        //target filter list items by placing listener on parent\r\n        // document.getElementById('filterList').addEventListener('click', function (event) {\r\n        //     console.log(event.target)\r\n            \r\n        // });\r\n\r\n\r\n    }\r\n    \r\n    componentDidUpdate() {\r\n        // console.log(this.props.userCityInput, this.props.userCountryInput, this.props.schoolResults)\r\n        // if(this.state.currentCoordinates this.props.location)\r\n        let current = this.state.currentCoordinates;\r\n        let input = this.props.location;\r\n        for(let i = 0; i < 2; i++){\r\n            if (current[i] - input[i] > 1 || current[i] - input[i] < -1) {\r\n        \r\n                \r\n                let coordinates = [this.props.location[0], this.props.location[1]];\r\n                this.sectionRef.current.scrollIntoView();\r\n                let map = new mapboxgl.Map({\r\n                    container: this.mapContainer,\r\n                    style: 'mapbox://styles/mapbox/streets-v11',\r\n                    center: coordinates,\r\n                    zoom: 11\r\n                });\r\n\r\n                this.setState({\r\n                    currentCoordinates: coordinates\r\n                })\r\n\r\n                \r\n\r\n                map.on('load', () => {\r\n                    const filterButtons = document.getElementById('filterList')\r\n                    let listedSearchResults = document.getElementsByClassName('schoolResults');\r\n                    let resultsArray = [...listedSearchResults];\r\n\r\n                    resultsArray.forEach(result => {\r\n                        if(result.classList.contains('visible')) {\r\n                            result.classList.remove('visible')\r\n                        }\r\n                    })\r\n\r\n                    filterButtons.addEventListener('click', function (event) {\r\n                      \r\n                        resultsArray.forEach(result => {\r\n                            if (result.getAttribute('data-type') === event.target.textContent) {\r\n                               \r\n                                result.classList.toggle('visible')\r\n                            }\r\n                        })\r\n                    })\r\n\r\n                    if (this.props.schoolResults) {\r\n                        //for each set of coordinates do this and pass coodrinates to setlnglat\r\n                        this.props.schoolResults.forEach(point => {\r\n\r\n                            const marker = new mapboxgl.Marker({\r\n                                type: point.type,\r\n                                color: point.markerColor\r\n                            }).setLngLat([point.location.lng, point.location.lat])\r\n                                .setPopup(new mapboxgl.Popup().setHTML(`<h4>${point.name}</h4><p>${point.location.formattedAddress}</p>`))\r\n                                .addTo(map);\r\n\r\n                            const markerDiv = marker.getElement();\r\n                            //add type attribute to each marker node for filtering\r\n                            markerDiv.setAttribute('data-type', `${point.type}`)\r\n                            \r\n                            markerDiv.addEventListener('mouseenter', () => marker.togglePopup());\r\n                            markerDiv.addEventListener('mouseleave', () => marker.togglePopup());\r\n                            markerDiv.style.cursor = \"pointer\";\r\n                            markerDiv.addEventListener('click', (e) => {\r\n                               \r\n                                coordinates = [];\r\n                                for (let coord in marker._lngLat) {\r\n                                    coordinates.push(marker._lngLat[coord]);\r\n                                }\r\n\r\n                                this.setState({\r\n                                    map: true,\r\n                                    currentCoordinates: coordinates\r\n                                })\r\n\r\n\r\n                                map.flyTo({\r\n                                    center: this.state.currentCoordinates,\r\n                                    zoom: 14\r\n                                })\r\n                                // console.log(e, marker._lngLat)\r\n                            })\r\n\r\n\r\n                            //on filter click, compare filter text to data-type attribute on marker&search result to toggle visibility (via class)\r\n                            filterButtons.addEventListener('click', function (event) {\r\n                                // console.log(event.target)\r\n\r\n                                if (markerDiv.getAttribute('data-type') === event.target.textContent) {\r\n                                    markerDiv.classList.toggle('visible')\r\n                                }\r\n                            });\r\n                        })\r\n                    }\r\n                    this.props.schoolsAdded.forEach(point => {\r\n                        let marker = new mapboxgl.Marker()\r\n                            .setLngLat([point.coordinates[0], point.coordinates[1]])\r\n                            .setPopup(new mapboxgl.Popup().setHTML(`<h4>${point.schoolName}</h4><p>${point.schoolAddress}</p>`))\r\n                            .addTo(map);\r\n\r\n                        const markerDiv = marker.getElement();\r\n\r\n                        markerDiv.setAttribute('data-type', `${point.schoolType}`)\r\n\r\n                        markerDiv.addEventListener('mouseenter', () => marker.togglePopup());\r\n                        markerDiv.addEventListener('mouseleave', () => marker.togglePopup());\r\n                        markerDiv.style.cursor = \"pointer\";\r\n                        markerDiv.addEventListener('click', (e) => {\r\n                            coordinates = [];\r\n\r\n                            for (let coord in marker._lngLat) {\r\n                                coordinates.push(marker._lngLat[coord]);\r\n                            }\r\n\r\n                            this.setState({\r\n                                map: true,\r\n                                currentCoordinates: coordinates\r\n                            })\r\n\r\n\r\n                            map.flyTo({\r\n                                center: this.state.currentCoordinates,\r\n                                zoom: 14\r\n                            })\r\n                        })\r\n                    })\r\n\r\n\r\n\r\n                    map.on('move', () => {\r\n                        this.setState({\r\n                            lng: map.getCenter().lng.toFixed(4),\r\n                            lat: map.getCenter().lat.toFixed(4),\r\n                            zoom: map.getZoom().toFixed(2)\r\n                        });\r\n                    });\r\n\r\n                })\r\n\r\n\r\n            }\r\n        }\r\n\r\n    //     let map;\r\n    //     let coordinates = [];\r\n    //     if(this.state.map === false) {\r\n\r\n    //         map = new mapboxgl.Map({\r\n    //             container: this.mapContainer,\r\n    //             style: 'mapbox://styles/mapbox/streets-v11',\r\n    //             center: [this.props.location[0], this.props.location[1]],\r\n    //             zoom: 11\r\n    //         });\r\n    //     } else {\r\n    //         map = new mapboxgl.Map({\r\n    //             container: this.mapContainer,\r\n    //             style: 'mapbox://styles/mapbox/streets-v11',\r\n    //             center: this.state.currentCoordinates,\r\n    //             zoom: 11\r\n    //         });\r\n    //     }\r\n\r\n    //     if (this.props.schoolResults) {\r\n    //     this.props.schoolResults.forEach(point => {\r\n    //         let marker = new mapboxgl.Marker({\r\n    //             color: point.markerColor\r\n    //         })  .setLngLat([point.location.lng, point.location.lat])\r\n    //             .setPopup(new mapboxgl.Popup().setHTML(`<h4>${point.name}</h4><p>${point.location.formattedAddress}</p>`))\r\n    //             .addTo(map);\r\n\r\n    //         const markerDiv = marker.getElement();\r\n    //         markerDiv.addEventListener('mouseenter', () => marker.togglePopup());\r\n    //         markerDiv.addEventListener('mouseleave', () => marker.togglePopup());\r\n    //         markerDiv.style.cursor = \"pointer\";\r\n    //         markerDiv.addEventListener('click', (e) => {\r\n    //             for (let coord in marker._lngLat) {\r\n    //                 coordinates.push(marker._lngLat[coord]);\r\n    //             }\r\n\r\n    //             this.setState({\r\n    //                 map: true,\r\n    //                 currentCoordinates: coordinates\r\n    //             })\r\n\r\n\r\n    //             map.flyTo({\r\n    //                 center: this.state.currentCoordinates\r\n    //             })\r\n    //             // console.log(e, marker._lngLat)\r\n    //         })\r\n           \r\n\r\n    //     })\r\n    // }\r\n    //     this.props.schoolsAdded.forEach(point => {\r\n    //         let marker = new mapboxgl.Marker()\r\n    //             .setLngLat([point.coordinates[0], point.coordinates[1]])\r\n    //             .setPopup(new mapboxgl.Popup().setHTML(`<h4>${point.schoolName}</h4><p>${point.schoolAddress}</p>`))\r\n    //             .addTo(map);\r\n\r\n    //         const markerDiv = marker.getElement();\r\n    //         markerDiv.addEventListener('mouseenter', () => marker.togglePopup());\r\n    //         markerDiv.addEventListener('mouseleave', () => marker.togglePopup());\r\n    //         markerDiv.style.cursor = \"pointer\";\r\n    //         markerDiv.addEventListener('click', (e) => {\r\n    //             for (let coord in marker._lngLat) {\r\n    //                 coordinates.push(marker._lngLat[coord]);\r\n    //             }\r\n\r\n    //             this.setState({\r\n    //                 map: true,\r\n    //                 currentCoordinates: coordinates\r\n    //             })\r\n\r\n\r\n    //             map.flyTo({\r\n    //                 center: this.state.currentCoordinates\r\n    //             })\r\n    //             // console.log(e, marker._lngLat)\r\n    //         })\r\n    //     })\r\n\r\n    }\r\n    \r\n\r\n\r\n    removeSchool = (schoolRef) => {\r\n        const dbFavouritesRef = firebase.database().ref('NewSchools');\r\n        dbFavouritesRef.child(schoolRef).remove();\r\n        Swal.fire({\r\n            title: \"Institution Removed\",\r\n            text: \"thank you\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n        })\r\n    }\r\n\r\n    handleAddFav = (name, address) => {\r\n        const dbFavouritesRef = firebase.database().ref('Favourites')\r\n        const favouriteSchool = {\r\n            schoolName: name,\r\n            schoolAddress: [...address],\r\n            schoolNotes: ''\r\n        }\r\n        dbFavouritesRef.push(favouriteSchool);\r\n\r\n        Swal.fire({\r\n            title: \"Institution Added\",\r\n            text: \"thank you\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <section>\r\n                <div className=\"combinedSchools\">\r\n                    <div className=\"allResults\">\r\n                            <h2 className=\"searchLocation\" name=\"scroll-to-element\" ref={this.sectionRef}><span>{this.props.userCityInput}, {this.props.userCountryInput}</span></h2>\r\n                        <div className=\"resultsScrollBox\">\r\n                            {\r\n                                this.props.schoolsAdded ?\r\n                        <div className=\"addedSchool\">\r\n                            <h2>User Added</h2>\r\n                            {\r\n                                this.props.schoolsAdded.map((newSchoolObj) => {\r\n                                    return (\r\n                                        <div key={newSchoolObj.id} data-type={newSchoolObj.schoolType} className=\"schoolResults\">\r\n                                            <details>\r\n                                                <summary>{newSchoolObj.schoolName}</summary>\r\n                                                <p>{newSchoolObj.schoolAddress.join(', ')}</p>\r\n                                            </details>\r\n                                            <div className='buttonFlex'>\r\n                                                <button onClick={() => { this.handleAddFav(newSchoolObj.schoolName, newSchoolObj.schoolAddress)}}>Favourite</button>\r\n                                                <button onClick={() => { this.removeSchool(newSchoolObj.id)}}>Remove</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div> : null\r\n                            }\r\n                        {\r\n                            this.props.schoolResults ?\r\n                            <div className=\"searchedSchools\">\r\n                                <h2>Search Results</h2>\r\n                                {\r\n                                    this.props.schoolResults.map((schoolObj) => {\r\n                                        return (\r\n                                            <div key={schoolObj.id} data-type={schoolObj.type} className=\"schoolResults\">\r\n                                                <details>\r\n                                                    <summary>{schoolObj.name}</summary>\r\n                                                    <p>{schoolObj.location.formattedAddress.join(', ')}</p>\r\n                                                </details>\r\n                                                <button\r\n                                                    onClick={() => { this.handleAddFav(schoolObj.name, schoolObj.location.formattedAddress) }}\r\n                                                >favourite\r\n                                                </button>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        : <h2>Server issues: Could only return user added schools.</h2> }\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"mapHeading\">\r\n                        <h2>Map View</h2>\r\n                        <div>\r\n                            <div ref={el => this.mapContainer = el} className=\"mapContainer\" />\r\n                            <div className=\"filter\">\r\n                                <p className=\"srOnly\">Filter Results</p>\r\n                                    <ul id=\"filterList\">\r\n                                    {\r\n                                        this.props.filters.map((filters, i) => {\r\n                                            return(\r\n                                                <li key={i} className=\"filter\">{filters}</li>\r\n                                            )\r\n                                        })  \r\n                                    }\r\n                                    </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            \r\n        \r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import { Component, Fragment } from 'react';\r\nimport firebase from './Firebase.js';\r\nimport Swal from 'sweetalert2'\r\n\r\nclass AddSchool extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n                schoolName:'',\r\n                schoolType: '',\r\n                schoolAddress: {\r\n                    street: '',\r\n                    city: '',\r\n                    province: '',\r\n                    postalCode: '',\r\n                    country: ''\r\n                }\r\n        };\r\n        \r\n        // this.submitNewSchool = this.submitNewSchool.bind(this);\r\n\r\n    }\r\n\r\n    addSchool = (e) => {\r\n        e.preventDefault();\r\n        \r\n        \r\n        let schoolFormattedAddress = [this.state.schoolAddress.street, \r\n            this.state.schoolAddress.city + \" \" + this.state.schoolAddress.province + \" \" + this.state.schoolAddress.postalCode,\r\n            this.state.schoolAddress.country ];\r\n        \r\n        //make a referance to the database\r\n        const dbRef = firebase.database().ref('NewSchools')\r\n        const userNewSchool = {\r\n            schoolName:this.state.schoolName,\r\n            schoolType:this.state.schoolType,\r\n            schoolAddress: schoolFormattedAddress,\r\n        };\r\n\r\n\r\n        dbRef.push(userNewSchool);\r\n        \r\n        // create a notification for add push\r\n        Swal.fire({\r\n            title: \"New institution added\",\r\n            text: \"Thank You\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n            })\r\n\r\n        // clear form\r\n        this.setState({\r\n            schoolName: '',\r\n            schoolNote: '',\r\n            schoolType: '',\r\n            schoolAddress: {\r\n                street: '',\r\n                city: '',\r\n                province: '',\r\n                postalCode: '',\r\n                country: ''\r\n            }\r\n        })\r\n    }\r\n\r\n    updateAddress = (event, property) =>{\r\n        let schoolAddress = {...this.state.schoolAddress};\r\n        schoolAddress[property] = event.target.value;\r\n        this.setState({schoolAddress});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Fragment>\r\n                <div className=\"addSchoolForm\">\r\n                    <form >\r\n                        <label htmlFor=\"newSchoolName\">School Name</label>\r\n                        <input type=\"text\" id=\"newSchoolName\"\r\n                            value={this.state.schoolName}\r\n                            onChange={(event) => this.setState({ schoolName: event.target.value })} /><br />\r\n                        <div className=\"schoolTypeInputs\">\r\n                            <legend>School Type</legend>\r\n                            <input type=\"radio\" id='newUniversity' name='schoolType'\r\n                                value='University' required\r\n                                checked={this.state.schoolType === \"University\"}\r\n                                onChange={(event) => this.setState({ schoolType: event.target.value })} />\r\n                            <label htmlFor=\"newUniversity\">University</label>\r\n                            <input type=\"radio\" id='newCollege' name='schoolType'\r\n                                value='Community College'\r\n                                checked={this.state.schoolType === \"Community College\"}\r\n                                onChange={(event) => this.setState({ schoolType: event.target.value })} />\r\n                            <label htmlFor=\"newCollege\">College</label>\r\n                            <input type=\"radio\" id='newTradeSchool' name='schoolType'\r\n                                value='Trade School'\r\n                                checked={this.state.schoolType === \"Trade School\"}\r\n                                onChange={(event) => this.setState({ schoolType: event.target.value })} />\r\n                            <label htmlFor=\"newTradeSchool\">Trade School</label><br />\r\n                        </div>\r\n                        <div className=\"addressInputs\">\r\n                            <div className=\"addressInput\">\r\n                                <label htmlFor=\"newSchoolAddress\">Address</label>\r\n                                <input type=\"text\" id=\"newSchoolAddress\"\r\n                                    value={this.state.schoolAddress.street}\r\n                                    onChange={(event) => this.updateAddress(event, 'street')} />\r\n                            </div>\r\n                            <div className=\"addressInput\">\r\n                                <label htmlFor=\"newSchoolCity\">City</label>\r\n                                <input type=\"text\" id=\"newSchoolCity\"\r\n                                    value={this.state.schoolAddress.city}\r\n                                    onChange={(event) => this.updateAddress(event, 'city')} />\r\n                            </div>\r\n                            <div className=\"addressInput\">\r\n                                <label htmlFor=\"newSchoolProvince\">Province</label>\r\n                                <input type=\"text\" id=\"newSchoolProvince\"\r\n                                    value={this.state.schoolAddress.province}\r\n                                    onChange={(event) => this.updateAddress(event, 'province')} />\r\n                            </div>\r\n                            <div className=\"addressInput\">\r\n                                <label htmlFor=\"newSchoolPostal\">Postal Code</label>\r\n                                <input type=\"text\" id=\"newSchoolPostal\"\r\n                                    value={this.state.schoolAddress.postalCode}\r\n                                    onChange={(event) => this.updateAddress(event, 'postalCode')} />\r\n                            </div>\r\n                            <div className=\"addressInput\">\r\n                                <label htmlFor=\"newSchoolCountry\">Country</label>\r\n                                <input type=\"text\" id=\"newSchoolCountry\"\r\n                                    value={this.state.schoolAddress.country}\r\n                                    onChange={(event) => this.updateAddress(event, 'country')} />\r\n                            </div>\r\n                        </div>\r\n                        <button className=\"addSchoolButton\" onClick={this.addSchool}>Add new school</button>\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddSchool;","import { Component } from 'react';\r\nimport firebase from './Firebase.js';\r\nimport Swal from 'sweetalert2'\r\n\r\nclass Favourite extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            schoolNotes: '',\r\n            schoolId: ''\r\n        }\r\n    }\r\n\r\n    removeSchool = (schoolRef) => {\r\n        const dbFavouritesRef = firebase.database().ref('Favourites');\r\n        dbFavouritesRef.child(schoolRef).remove();\r\n        Swal.fire({\r\n            title: \"Institution Removed\",\r\n            text: \"Your favourite list has been updated\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n        })\r\n    }\r\n\r\n    handleAddNotes = (schoolId) => {\r\n        const dbFavouritesRef = firebase.database().ref('Favourites')\r\n        dbFavouritesRef.child(schoolId).update({ schoolNotes: this.state.schoolNotes });\r\n       this.setState({\r\n           schoolNotes: ''\r\n       })\r\n        Swal.fire({\r\n            title: \"Note Added\",\r\n            text: \"Added\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n        })\r\n    }\r\n\r\n   render() { \r\n       const {id, schoolName, schoolAddress, schoolNotes} = this.props.school;\r\n       return (\r\n           <>\r\n           {/* <li key={id}>\r\n               <h3>{schoolName}</h3>\r\n               <p>{schoolAddress}</p>\r\n               <p><span>Notes: </span>{schoolNotes}</p>\r\n               <label htmlFor=\"notes\">Notes</label>\r\n               <textarea value={this.state.schoolNotes} name=\"notes\" id=\"notes\" onChange={(event) => this.setState({schoolNotes: event.target.value, schoolId: id })}></textarea>\r\n               <button onClick={() => { this.handleAddNotes(id) }}>Add Notes</button>\r\n               <button onClick>Edit Notes</button>\r\n               <button onClick={() => { this.removeSchool(id) }}>Remove School</button>\r\n           </li> */}\r\n       \r\n           \r\n           <li key={id} className=\"favoritesFlex\">\r\n                   <h3>{schoolName}</h3>\r\n                   <p>{schoolAddress}</p>\r\n                   <p><span>Notes: </span>{schoolNotes}</p>\r\n                   <label htmlFor=\"notes\" className=\"srOnly\">Notes: type below to add</label>\r\n                   <textarea placeholder=\"Type here to add notes\" value={this.state.schoolNotes} name=\"notes\" id=\"notes\" onChange={(event) => this.setState({schoolNotes: event.target.value, schoolId: id })}></textarea>\r\n                   <div className=\"buttonFlex\">\r\n                   <button onClick={() => { this.handleAddNotes(id) }}>Add Notes</button>\r\n                   <button onClick={() => { this.removeSchool(id) }}>Remove School</button>\r\n                   </div>\r\n               </li>\r\n            </>\r\n           )\r\n   }\r\n}\r\nexport default Favourite;","import { Component, Fragment } from 'react';\r\nimport firebase from './Firebase.js';\r\nimport Favourite from './Favourite.js';\r\n\r\nclass Favourites extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state ={\r\n            favourites: [],\r\n            schoolNotes: '',\r\n            schoolId: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const dbRef = firebase.database().ref();\r\n\r\n        dbRef.on('value', (data) => {\r\n            const firebaseDataObj = data.val();\r\n            const favouritesObject = firebaseDataObj.Favourites;\r\n\r\n            let favouritesArray = [];\r\n            let userFavourite;\r\n\r\n            for (let schoolId in favouritesObject) {\r\n                userFavourite = favouritesObject[schoolId];\r\n                userFavourite.id = schoolId; \r\n                userFavourite.notes = this.state.schoolNotes\r\n                favouritesArray.push(userFavourite);\r\n            }\r\n\r\n            this.setState({\r\n                favourites: favouritesArray\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n   render() { \r\n       return (\r\n           <Fragment>\r\n               <div className=\"favorites\">\r\n               <h2>Favourites</h2>\r\n               <ul>\r\n               {\r\n                   this.state.favourites.map((school) => {\r\n                       return(\r\n                        <Fragment>\r\n                            <Favourite \r\n                            school={school}\r\n                            />\r\n                        </Fragment>\r\n                       )\r\n                   })\r\n               }\r\n               </ul>\r\n               </div>\r\n           </Fragment>\r\n       )\r\n   }\r\n}\r\nexport default Favourites;","const { Fragment } = require(\"react\");\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n        <p>Juno College 2020 Created by <span><a href=\"https://clarkemacarthur.com/\">Clarke</a>, <a href=\"http://erzhena.ca/\">Erzhena</a>, <a href=\"https://www.harrydarwin.com/\">Harry</a> and <a href=\"https://kylekodes.com/\">Kyle</a> &#169;</span></p>\r\n\r\n        <p><span>Photo by <a href=\"https://unsplash.com/@iemyoung?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Emily Karakis</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\n// adding react scroll library\r\nimport { animateScroll as scroll, scroller } from \"react-scroll\";\r\nimport Swal from 'sweetalert2';\r\nimport axios from 'axios';\r\nimport firebase from './Firebase.js';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport Header from './Header.js';\r\nimport SearchResults from './SearchResults.js';\r\nimport './App.css';\r\nimport AddSchool from './AddSchool';\r\nimport Favourites from './Favourites.js';\r\nimport Footer from './Footer.js';\r\n\r\n\r\nlet city = \"\";\r\nlet country = \"\";\r\nlet mapSearches = [];\r\nlet searchResults = [];\r\nlet filterOptions = [];\r\nmapboxgl.accessToken = `pk.eyJ1IjoiaGFycnlndWxvaWVuIiwiYSI6ImNrazQ2bmFuYTE2c2MydnBiZW5mcDVnaHYifQ.QPjai4qdHOKRY8qHYt1QVw`;\r\nconst universityID = '4bf58dd8d48988d1ae941735';\r\nconst collegeID = '4bf58dd8d48988d1a2941735';\r\nconst tradeSchoolID = '4bf58dd8d48988d1ad941735';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      schoolResults: [],\r\n      favourites: [],\r\n      radius: '',\r\n      schoolTypeId: '',\r\n      cityInput: '',\r\n      countryInput: '',\r\n      formattedAddress: [],\r\n      newSchool: [],\r\n      favouriteLength: '',\r\n      isActive: false,\r\n      directMeHome: false,\r\n      mapLocations: [],\r\n      longLatLocations: [],\r\n      locationCoordinates: [],\r\n      filters: []\r\n    }\r\n  }\r\n\r\n// scroll to element function\r\n scrollTo() {\r\n    scroller.scrollTo('scroll-to-element', {\r\n      duration: 800,\r\n      delay: 0,\r\n      smooth: 'easeInOutQuart'\r\n    })\r\n  }\r\n\r\n  \r\n\r\n getData = () => {\r\n   // testArray.forEach(school => this.mapData(school));\r\n   this.mapData(`${this.state.cityInput} ${this.state.countryInput}`)  \r\n  //Grab data from API\r\n  setTimeout(() => {\r\n    this.categoriesToSearch(universityID, collegeID, tradeSchoolID);\r\n     //Grab data from firebase\r\n     this.fireBaseCall();\r\n     //  scrolls to search results when API call is made\r\n     this.scrollTo();\r\n  }, 2) \r\n }\r\n\r\n handleSubmit = (e) => {\r\n   e.preventDefault();\r\n   city = '';\r\n   country = '';\r\n   mapSearches = [];\r\n   searchResults = [];\r\n   filterOptions = [];\r\n    this.setState({\r\n      schoolResults: [],\r\n      newSchool: []\r\n    })\r\n   this.getData();\r\n   this.setState({\r\n     directMeHome: true\r\n   })\r\n }\r\n\r\n//  handleSchoolType = (e) => {\r\n//    this.setState({\r\n//      schoolTypeId: e.target.value\r\n//    })\r\n//  }\r\n\r\n handleRadius = (e) => {\r\n   this.setState({\r\n     radius: e.target.value\r\n   })\r\n }\r\n\r\n handleCityInput = (e) => {\r\n  this.setState({\r\n    cityInput: e.target.value\r\n  })\r\n }\r\n\r\n handleCountryInput = (e) => {\r\n   this.setState({\r\n     countryInput: e.target.value\r\n   })\r\n }\r\n\r\n\r\n  fireBaseCall() {\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on('value', (data) => {\r\n      const firebaseDataObj = data.val();\r\n      const newSchoolObject = firebaseDataObj.NewSchools;\r\n\r\n      // create and store usable, formatted firebase data \r\n      let newSchoolArray = formatFirebaseData(newSchoolObject);\r\n      // convert and store API school type id (long alphanumeric string) to english school type for usable comparison\r\n      // let userSchoolType = this.convertCategoryIdToName();\r\n\r\n      // filter firebase formatted school data by comparing school type with usr chosen school type and return results in an array\r\n      // const filteredNewSchoolArray = this.compareUserInputAndCreateResultsArray(newSchoolArray, userSchoolType);\r\n      mapSearches = [];\r\n      //was filteredNewSchoolArray\r\n      newSchoolArray.forEach(school => {\r\n        this.userSchoolMapData(school);\r\n      })\r\n      \r\n      //store results in state\r\n      this.setState({\r\n        newSchool: newSchoolArray\r\n      });\r\n    });\r\n    // store in variables to pass as props\r\n    city = this.state.cityInput;\r\n    country = this.state.countryInput;\r\n  }\r\n\r\n//takes firebase schools objects, formats addresses + find and formats coordinates, then pushes to array mapSearches. \r\n  userSchoolMapData(query) {\r\n    let eachSchool = query;\r\n    eachSchool.address = query.schoolAddress.join();\r\n\r\n    this.geoCodeCall(eachSchool.address)\r\n      .then((res) => {\r\n        //check for address (just error handling because firebase has a blank placeholder object)\r\n        if(res.data.features.length > 0){\r\n          //take first address in search results array and push to mapSearches array to be displayed\r\n          eachSchool.coordinates =  res.data.features[0].center;\r\n         \r\n          mapSearches.push(eachSchool);\r\n        }\r\n      }).catch((err) => {\r\n        this.setState({\r\n          isActive: false,\r\n        });\r\n        Swal.fire({\r\n          title: \"Please Try Again\",\r\n          text: \"We are experiencing technical difficulties\",\r\n          icon: \"error\",\r\n          confirmButtonText: \"Ok\",\r\n        });\r\n      });\r\n      \r\n\r\n  }\r\n\r\n  // Grab coordinates of current location (with geocodecall) and stores cooordinates in state to build initial map\r\n  mapData(query) {\r\n    this.geoCodeCall(query)\r\n      .then((res) => {\r\n        const possibleLocations = res.data.features;\r\n\r\n        const ourLocation = possibleLocations[0].geometry.coordinates;\r\n       \r\n        this.setState({\r\n          locationCoordinates: ourLocation\r\n        })\r\n        console.log(this.state.locationCoordinates)\r\n      }).catch((err) => {\r\n        \r\n        Swal.fire({\r\n          title: \"Issue with request\",\r\n          text: \"Please check you location and try again\",\r\n          icon: \"error\",\r\n          confirmButtonText: \"Ok\",\r\n        });\r\n      });;\r\n  }\r\n\r\n//translates addresses to long and lat coordinates\r\n  geoCodeCall(query) {\r\n    return axios({\r\n      method: 'GET',\r\n      responseType: 'json',\r\n      url: `https://api.mapbox.com/geocoding/v5/mapbox.places/${query}.json?`,\r\n      params: {\r\n        access_token: mapboxgl.accessToken,\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  //filters through array of schools comparing the category to the user-chosen type/category + location input \r\n  compareUserInputAndCreateResultsArray(newSchoolArray, userSchoolType) {\r\n    return newSchoolArray.filter((object => {\r\n\r\n      //  making inputs and comparison case sensitive\r\n      const addedSchoolCity = object.schoolAddress[1].toLowerCase();\r\n      const addedSchoolCountry = object.schoolAddress[2].toLowerCase();\r\n      \r\n      return ((object.schoolType === userSchoolType) && addedSchoolCity.includes(this.state.cityInput.toLowerCase()) && addedSchoolCountry.includes(this.state.countryInput.toLowerCase())) || ((object.schoolType === userSchoolType) && addedSchoolCity.includes(this.state.cityInput.toLowerCase()) && addedSchoolCity.includes(this.state.cityInput.toLowerCase()))\r\n    })\r\n    );\r\n  }\r\n\r\n  //takes user type choice (# ID) and converts to string word\r\n  convertCategoryIdToName() {\r\n    let userSchoolType = '';\r\n    if (this.state.schoolTypeId === '4bf58dd8d48988d1ae941735') {\r\n      userSchoolType = 'University';\r\n    } else if (this.state.schoolTypeId === '4bf58dd8d48988d1a2941735') {\r\n      userSchoolType = 'Community College';\r\n    } else if (this.state.schoolTypeId === '4bf58dd8d48988d1ad941735') {\r\n      userSchoolType = 'Trade School';\r\n    }\r\n    return userSchoolType;\r\n  }\r\n\r\n  // API call function which draws data from the API and handles errors if data is not found \r\n  apiCall(schoolType) {\r\n    // longLats = [];\r\n    axios({\r\n      method: 'GET',\r\n      responseType: 'json',\r\n      url: 'https://api.foursquare.com/v2/venues/search',\r\n      params: {\r\n        client_id: 'SMUUEFGVRENHIW3EQX5ICCFCTNQPPIWVXP21E2BQVRH421OF',\r\n        client_secret: 'EVNPHQ3EYKNQKZMOAKRVUTT0KDHXXGNUWUCY0LFZTVRE2BAF',\r\n        near: this.state.cityInput + \" \" + this.state.countryInput,\r\n        categoryId: schoolType,\r\n        radius: this.state.radius,\r\n        v: 20201205\r\n      }\r\n    }).then((res) => {\r\n      const dataArray = res.data.response.venues;\r\n\r\n      const filteredArray = ourCategoryFilter(dataArray);\r\n\r\n      //assign a markerColor to each school object based on its type\r\n      colorTypePicker(filteredArray);\r\n      // if(filteredArray) {\r\n      //   filteredArray.forEach(school => {\r\n      //     longLats.push(school)\r\n      //   })\r\n      filteredArray.forEach(school => {\r\n        if(!filterOptions.includes(school.type)) {\r\n          filterOptions.push(school.type)\r\n        }\r\n      })\r\n      filteredArray.forEach(result => searchResults.push(result));\r\n      this.setState({\r\n        schoolResults: searchResults,\r\n        isActive: true,\r\n        filters: filterOptions\r\n      });\r\n        \r\n        // console.log(filteredArray, longLats)\r\n      // }\r\n\r\n    }).catch((err) => {\r\n      \r\n      \r\n      if (err == \"Error: Request failed with status code 403\"){\r\n        this.setState({\r\n          isActive: true,\r\n          schoolResults: false\r\n        });\r\n      \r\n        // this.fireBaseCall();\r\n        // //  scrolls to search results when API call is made\r\n        // this.scrollTo();\r\n\r\n        // // testArray.forEach(school => this.mapData(school));\r\n        // this.mapData(`${this.state.cityInput} ${this.state.countryInput}`)\r\n        // Swal.fire({\r\n        //   title: \"Technical Difficulties\",\r\n        //   text: \"Please Try Another City and Province/Country\",\r\n        //   icon: \"error\",\r\n        //   confirmButtonText: \"Ok\",\r\n        // });\r\n    } else {\r\n        this.setState({\r\n          isActive: false,\r\n        });\r\n        Swal.fire({\r\n          title: \"No Schools Found\",\r\n          text: \"Please Try Another City and Province/Country\",\r\n          icon: \"error\",\r\n          confirmButtonText: \"Ok\",\r\n        });\r\n    }\r\n    });\r\n  }\r\n\r\n  categoriesToSearch(...queries) {\r\n    queries.forEach(query => {\r\n      this.apiCall(query);\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <Router>\r\n        \r\n        <Header\r\n        // schoolHandler={this.handleSchoolType}\r\n        radiusHandler={this.handleRadius}\r\n        handleCityInput={this.handleCityInput}\r\n        handleCountryInput={this.handleCountryInput}\r\n        submitHandler={this.handleSubmit}\r\n        />\r\n        <div className=\"wrapper\">\r\n        {this.state.isActive \r\n            ? <Route exact path=\"/searchResults\" render={() => {\r\n          return (\r\n            <>\r\n            <SearchResults \r\n              schoolResults = {this.state.schoolResults}\r\n              schoolsAdded = {this.state.newSchool}\r\n              userCityInput = {city}\r\n              userCountryInput = {country}\r\n              location = {this.state.locationCoordinates}\r\n              // mapPoints = {longLats}\r\n              filters = {this.state.filters}\r\n              schoolsAdded = {mapSearches}\r\n              />\r\n            </>\r\n          )\r\n        }\r\n         }/>  : null \r\n      } \r\n\r\n        <Route path=\"/addSchool\" component={AddSchool} /> \r\n        <Route path=\"/favourites\" component={Favourites} /> \r\n        </div>\r\n        <Footer />\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n\r\n\r\n// Formats user input schools from firebase into identical objects with ID's and pushes formatted objects to new array\r\nfunction formatFirebaseData(newSchoolObject) {\r\n  let newSchoolArray = [];\r\n  let userNewSchool;\r\n\r\n  for (let schoolId in newSchoolObject) {\r\n    userNewSchool = newSchoolObject[schoolId];\r\n    userNewSchool.id = schoolId;\r\n\r\n    newSchoolArray.push(userNewSchool);\r\n  }\r\n  return newSchoolArray;\r\n}\r\n\r\n// Function to filter our data by category type matching the user selection - ie: university, college or trade school \r\nfunction ourCategoryFilter(dataArray) {\r\n  return dataArray.filter((object => {\r\n    return object.name.includes(\"University\") || object.categories[0].name === \"Community College\" || object.categories[0].name === \"Trade School\" && object.location.formattedAddress.length > 2;\r\n  })\r\n  );\r\n}\r\n\r\nfunction colorTypePicker(array) {\r\n\r\n  array.forEach(object => {\r\n  \r\n    if (object.name.includes(\"University\")) { object.markerColor = \"#7261a3\"; object.type = \"University\" }\r\n    else if (object.categories[0].name == \"Community College\") { object.markerColor = \"#5ca4a9\"; object.type = \"College\" }\r\n    else if (object.categories[0].name == \"Trade School\") { object.markerColor = \"#e6af2e\"; object.type = \"Trade School\" }\r\n    else { object.markerColor = \"#EDD2E0\"; object.type = \"\" }\r\n  })\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}