{"version":3,"sources":["Firebase.js","Header.js","SearchResults.js","AddSchool.js","Favourite.js","Favourites.js","Footer.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Header","setRedirect","setState","redirect","renderRedirect","state","exact","to","favouriteLength","database","ref","on","data","favouriteSchool","favouritesObject","val","Favourites","newFavouriteArray","favourite","push","favouritesLength","length","this","props","schoolHandler","radiusHandler","handleCityInput","handleCountryInput","submitHandler","action","onSubmit","className","onChange","type","placeholder","id","required","htmlFor","name","value","onClick","activeClassName","Component","mapboxgl","accessToken","SearchResults","removeSchool","schoolRef","child","remove","Swal","fire","title","text","icon","confirmButtonText","handleAddFav","address","dbFavouritesRef","schoolName","schoolAddress","schoolNotes","savedSchool","lng","lat","zoom","sectionRef","React","createRef","current","scrollIntoView","map","Map","container","mapContainer","style","center","location","mapPoints","forEach","point","console","log","Marker","setLngLat","setPopup","Popup","setHTML","addTo","offset","getCenter","toFixed","getZoom","userCityInput","userCountryInput","schoolsAdded","newSchoolObj","join","schoolResults","schoolObj","formattedAddress","el","AddSchool","addSchool","e","preventDefault","schoolFormattedAddress","street","city","province","postalCode","country","dbRef","userNewSchool","schoolType","schoolNote","updateAddress","event","property","target","checked","Favourite","handleAddNotes","schoolId","update","school","favourites","userFavourite","favouritesArray","notes","require","Fragment","Footer","href","mapSearches","longLats","App","getData","apiCall","fireBaseCall","scrollTo","mapData","cityInput","countryInput","handleSubmit","directMeHome","handleSchoolType","schoolTypeId","handleRadius","radius","newSchool","isActive","mapLocations","longLatLocations","locationCoordinates","scroller","duration","delay","smooth","newSchoolArray","newSchoolObject","formatFirebaseData","NewSchools","userSchoolType","convertCategoryIdToName","filteredNewSchoolArray","compareUserInputAndCreateResultsArray","query","axios","method","responseType","url","params","access_token","then","res","ourLocation","features","geometry","coordinates","filter","object","addedSchoolCity","toLowerCase","addedSchoolCountry","includes","client_id","client_secret","near","categoryId","v","filteredArray","dataArray","categories","ourCategoryFilter","response","venues","catch","err","path","render","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7d6354f.chunk.js","sourcesContent":["\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCx_22IVNfxHM8TyjNoRqbqbf30j2flMgU\",\r\n    authDomain: \"collegenavigator-40c76.firebaseapp.com\",\r\n    projectId: \"collegenavigator-40c76\",\r\n    storageBucket: \"collegenavigator-40c76.appspot.com\",\r\n    messagingSenderId: \"497329332909\",\r\n    appId: \"1:497329332909:web:c15591a2de202a9fe99c24\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import { Component } from 'react';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport firebase from './Firebase'\r\n\r\n\r\n\r\nclass Header extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state={\r\n            favouriteLength:[],\r\n            redirect: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const dbRef = firebase.database().ref();\r\n\r\n        dbRef.on('value', (data) => {\r\n            const firebaseDataObj = data.val();\r\n            const favouritesObject = firebaseDataObj.Favourites;\r\n            let newFavouriteArray = [];\r\n            let favouriteSchool;\r\n\r\n            for (let favourite in favouritesObject) {\r\n                favouriteSchool = favouritesObject[favourite];\r\n                newFavouriteArray.push(favouriteSchool);\r\n            }\r\n\r\n            this.setState({\r\n                favouritesLength: newFavouriteArray.length - 1\r\n            })\r\n        })\r\n    }\r\n\r\n    setRedirect = () => {\r\n        this.setState({\r\n            redirect:true\r\n        })\r\n    }\r\n\r\n    renderRedirect = () => {\r\n        if(this.state.redirect) {\r\n            this.setState({\r\n                redirect: false\r\n            })\r\n            return <Redirect exact to=\"/searchResults\" />\r\n        }\r\n    }\r\n\r\n    render() {    \r\n    const { schoolHandler, radiusHandler, handleCityInput, handleCountryInput, submitHandler } = this.props;\r\n        return (\r\n            <header>\r\n                <h1>College Navigator</h1>\r\n                <form action='submit' onSubmit={submitHandler}>\r\n                    <div className=\"wrapper\">\r\n\r\n                    \r\n                    <div className=\"cityInputs\">\r\n                    <input onChange={handleCityInput} type=\"text\" placeholder='City' id='citySearch' required/>\r\n                    <label className='srOnly' htmlFor=\"citySearch\">Please enter a city to search</label>\r\n\r\n                    <input onChange={handleCountryInput} type=\"text\" placeholder='Province/State OR Country' id='countrySearch' required/>\r\n                    <label className=\"srOnly\" htmlFor=\"countrySearch\">Please enter the country the city is in</label>\r\n                    </div>\r\n                    \r\n                    <div className=\"radiusInputs\">\r\n                        <legend>Search Radius</legend>\r\n                        <div>\r\n                            <input onChange={radiusHandler} type=\"radio\" id='shortRadius' name='radius' value='5000' required/>\r\n                            <label htmlFor=\"shortRadius\">5KM</label>\r\n                            <input onChange={radiusHandler} type=\"radio\" id='mediumRadius' name='radius' value='10000' />\r\n                            <label htmlFor=\"mediumRadius\">10KM</label>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <input onChange={radiusHandler} type=\"radio\" id='longRadius' name='radius' value='25000' />\r\n                            <label htmlFor=\"longRadius\">25KM</label>\r\n                            <input onChange={radiusHandler} type=\"radio\" id='xlongRadius' name='radius' value='50000' />\r\n                            <label htmlFor=\"xlongRadius\">50KM</label>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"schoolTypeInputs\">\r\n                        <legend>School Type</legend>\r\n                        <input onChange={schoolHandler} type=\"radio\" id='university' name='schoolType' value='4bf58dd8d48988d1ae941735' required/>\r\n                        <label htmlFor=\"university\">University</label>\r\n                        <input onChange={schoolHandler} type=\"radio\" id='college' name='schoolType' value='4bf58dd8d48988d1a2941735' />\r\n                        <label htmlFor=\"college\">College</label>\r\n                        <div>\r\n                            <input onChange={schoolHandler} type=\"radio\" id='tradeSchool' name='schoolType' value='4bf58dd8d48988d1ad941735' />\r\n                            <label htmlFor=\"tradeSchool\">Trade School</label>\r\n                        </div>\r\n                    </div>\r\n                    {this.renderRedirect()}\r\n                    <button onClick={this.setRedirect}>Find Schools!</button>\r\n                    </div>\r\n                </form>\r\n                <nav>\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink activeClassName=\"active\" to=\"/searchResults\">Home</NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink activeClassName=\"active\" to=\"/favourites\">Favourite Schools ({this.state.favouritesLength})</NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink activeClassName=\"active\" to=\"/addSchool\">Add School</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport firebase from './Firebase.js';\r\nimport Swal from 'sweetalert2';\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nmapboxgl.accessToken = `pk.eyJ1IjoiaGFycnlndWxvaWVuIiwiYSI6ImNrazQ2bmFuYTE2c2MydnBiZW5mcDVnaHYifQ.QPjai4qdHOKRY8qHYt1QVw`;\r\n\r\nclass SearchResults extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            savedSchool: {\r\n                schoolName: '',\r\n                schoolAddress: [],\r\n            },\r\n            lng: 5,\r\n            lat: 34,\r\n            zoom: 2\r\n        }\r\n\r\n        this.sectionRef = React.createRef();\r\n    }\r\n\r\n\r\n   \r\n\r\n\r\n    componentDidMount() {\r\n        this.sectionRef.current.scrollIntoView();\r\n\r\n        let map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [this.props.location[0], this.props.location[1]],\r\n            zoom: 11\r\n        });\r\n\r\n        //for each set of coordinates do this and pass coodrinates to setlnglat\r\n        this.props.mapPoints.forEach(point => {\r\n            console.log(point)\r\n            let marker = new mapboxgl.Marker()\r\n                .setLngLat([point.location.lng, point.location.lat])\r\n                .setPopup(new mapboxgl.Popup().setHTML(`<h4>${point.name}</h4>`))\r\n                .addTo(map);\r\n\r\n            let popup = new mapboxgl.Popup({ offset: 25 });\r\n           \r\n        })\r\n\r\n\r\n\r\n\r\n        map.on('move', () => {\r\n            this.setState({\r\n                lng: map.getCenter().lng.toFixed(4),\r\n                lat: map.getCenter().lat.toFixed(4),\r\n                zoom: map.getZoom().toFixed(2)\r\n            });\r\n        });\r\n    }\r\n    \r\n    componentDidUpdate() {\r\n        let map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [this.props.location[0], this.props.location[1]],\r\n            zoom: 11\r\n        });\r\n\r\n        this.props.mapPoints.forEach(point => {\r\n            console.log(point)\r\n            let marker = new mapboxgl.Marker()\r\n                .setLngLat([point.location.lng, point.location.lat])\r\n                .setPopup(new mapboxgl.Popup().setHTML(`<h4>${point.name}</h4>`))\r\n                .addTo(map);\r\n\r\n            let popup = new mapboxgl.Popup({ offset: 25 });\r\n           \r\n        })\r\n    }\r\n    \r\n\r\n\r\n    removeSchool = (schoolRef) => {\r\n        const dbFavouritesRef = firebase.database().ref('NewSchools');\r\n        dbFavouritesRef.child(schoolRef).remove();\r\n        Swal.fire({\r\n            title: \"Institution Removed\",\r\n            text: \"thank you\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n        })\r\n    }\r\n\r\n    handleAddFav = (name, address) => {\r\n        const dbFavouritesRef = firebase.database().ref('Favourites')\r\n        const favouriteSchool = {\r\n            schoolName: name,\r\n            schoolAddress: [...address],\r\n            schoolNotes: ''\r\n        }\r\n        dbFavouritesRef.push(favouriteSchool);\r\n\r\n        Swal.fire({\r\n            title: \"Institution Added\",\r\n            text: \"thank you\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <section>\r\n                <div className=\"combinedSchools\">\r\n                    <div className=\"allResults\">\r\n                            <h2 className=\"searchLocation\" name=\"scroll-to-element\" ref={this.sectionRef}><span>{this.props.userCityInput}, {this.props.userCountryInput}</span></h2>\r\n                        <div className=\"resultsScrollBox\">\r\n                        <div className=\"addedSchool\">\r\n                            <h2>User Added</h2>\r\n                            {\r\n                                this.props.schoolsAdded.map((newSchoolObj) => {\r\n                                    return (\r\n                                        <div key={newSchoolObj.id} className=\"schoolResults\">\r\n                                            <details>\r\n                                                <summary>{newSchoolObj.schoolName}</summary>\r\n                                                <p>{newSchoolObj.schoolAddress.join(', ')}</p>\r\n                                            </details>\r\n                                            <div className='buttonFlex'>\r\n                                                <button onClick={() => { this.handleAddFav(newSchoolObj.schoolName, newSchoolObj.schoolAddress)}}>Favourite</button>\r\n                                                <button onClick={() => { this.removeSchool(newSchoolObj.id)}}>Remove</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                            <div className=\"searchedSchools\">\r\n                                <h2>Search Results</h2>\r\n                                {\r\n                                    this.props.schoolResults.map((schoolObj) => {\r\n                                        return (\r\n                                            <div key={schoolObj.id} className=\"schoolResults\">\r\n                                                <details>\r\n                                                    <summary>{schoolObj.name}</summary>\r\n                                                    <p>{schoolObj.location.formattedAddress.join(', ')}</p>\r\n                                                </details>\r\n                                                <button\r\n                                                    onClick={() => { this.handleAddFav(schoolObj.name, schoolObj.location.formattedAddress) }}\r\n                                                >favourite\r\n                            </button>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"mapHeading\">\r\n                        <h2>Map View</h2>\r\n                        <div>\r\n                            <div ref={el => this.mapContainer = el} className=\"mapContainer\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            \r\n        \r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import { Component, Fragment } from 'react';\r\nimport firebase from './Firebase.js';\r\nimport Swal from 'sweetalert2'\r\n\r\nclass AddSchool extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n                schoolName:'',\r\n                schoolType: '',\r\n                schoolAddress: {\r\n                    street: '',\r\n                    city: '',\r\n                    province: '',\r\n                    postalCode: '',\r\n                    country: ''\r\n                }\r\n        };\r\n        \r\n        // this.submitNewSchool = this.submitNewSchool.bind(this);\r\n\r\n    }\r\n\r\n    addSchool = (e) => {\r\n        e.preventDefault();\r\n        \r\n        \r\n        let schoolFormattedAddress = [this.state.schoolAddress.street, \r\n            this.state.schoolAddress.city + \" \" + this.state.schoolAddress.province + \" \" + this.state.schoolAddress.postalCode,\r\n            this.state.schoolAddress.country ];\r\n        \r\n        //make a referance to the database\r\n        const dbRef = firebase.database().ref('NewSchools')\r\n        const userNewSchool = {\r\n            schoolName:this.state.schoolName,\r\n            schoolType:this.state.schoolType,\r\n            schoolAddress: schoolFormattedAddress,\r\n        };\r\n\r\n\r\n        dbRef.push(userNewSchool);\r\n        \r\n        // create a notification for add push\r\n        Swal.fire({\r\n            title: \"New institution added\",\r\n            text: \"Thank You\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n            })\r\n\r\n        // clear form\r\n        this.setState({\r\n            schoolName: '',\r\n            schoolNote: '',\r\n            schoolType: '',\r\n            schoolAddress: {\r\n                street: '',\r\n                city: '',\r\n                province: '',\r\n                postalCode: '',\r\n                country: ''\r\n            }\r\n        })\r\n    }\r\n\r\n    updateAddress = (event, property) =>{\r\n        let schoolAddress = {...this.state.schoolAddress};\r\n        schoolAddress[property] = event.target.value;\r\n        this.setState({schoolAddress});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Fragment>\r\n                <div className=\"addSchoolForm\">\r\n                    <form >\r\n                        <label htmlFor=\"newSchoolName\">School Name</label>\r\n                        <input type=\"text\" id=\"newSchoolName\"\r\n                            value={this.state.schoolName}\r\n                            onChange={(event) => this.setState({ schoolName: event.target.value })} /><br />\r\n                        <div className=\"schoolTypeInputs\">\r\n                            <legend>School Type</legend>\r\n                            <input type=\"radio\" id='newUniversity' name='schoolType'\r\n                                value='University' required\r\n                                checked={this.state.schoolType === \"University\"}\r\n                                onChange={(event) => this.setState({ schoolType: event.target.value })} />\r\n                            <label htmlFor=\"newUniversity\">University</label>\r\n                            <input type=\"radio\" id='newCollege' name='schoolType'\r\n                                value='Community College'\r\n                                checked={this.state.schoolType === \"Community College\"}\r\n                                onChange={(event) => this.setState({ schoolType: event.target.value })} />\r\n                            <label htmlFor=\"newCollege\">College</label>\r\n                            <input type=\"radio\" id='newTradeSchool' name='schoolType'\r\n                                value='Trade School'\r\n                                checked={this.state.schoolType === \"Trade School\"}\r\n                                onChange={(event) => this.setState({ schoolType: event.target.value })} />\r\n                            <label htmlFor=\"newTradeSchool\">Trade School</label><br />\r\n                        </div>\r\n                        <div className=\"addressInputs\">\r\n                            <div className=\"addressInput\">\r\n                                <label htmlFor=\"newSchoolAddress\">Address</label>\r\n                                <input type=\"text\" id=\"newSchoolAddress\"\r\n                                    value={this.state.schoolAddress.street}\r\n                                    onChange={(event) => this.updateAddress(event, 'street')} />\r\n                            </div>\r\n                            <div className=\"addressInput\">\r\n                                <label htmlFor=\"newSchoolCity\">City</label>\r\n                                <input type=\"text\" id=\"newSchoolCity\"\r\n                                    value={this.state.schoolAddress.city}\r\n                                    onChange={(event) => this.updateAddress(event, 'city')} />\r\n                            </div>\r\n                            <div className=\"addressInput\">\r\n                                <label htmlFor=\"newSchoolProvince\">Province</label>\r\n                                <input type=\"text\" id=\"newSchoolProvince\"\r\n                                    value={this.state.schoolAddress.province}\r\n                                    onChange={(event) => this.updateAddress(event, 'province')} />\r\n                            </div>\r\n                            <div className=\"addressInput\">\r\n                                <label htmlFor=\"newSchoolPostal\">Postal Code</label>\r\n                                <input type=\"text\" id=\"newSchoolPostal\"\r\n                                    value={this.state.schoolAddress.postalCode}\r\n                                    onChange={(event) => this.updateAddress(event, 'postalCode')} />\r\n                            </div>\r\n                            <div className=\"addressInput\">\r\n                                <label htmlFor=\"newSchoolCountry\">Country</label>\r\n                                <input type=\"text\" id=\"newSchoolCountry\"\r\n                                    value={this.state.schoolAddress.country}\r\n                                    onChange={(event) => this.updateAddress(event, 'country')} />\r\n                            </div>\r\n                        </div>\r\n                        <button className=\"addSchoolButton\" onClick={this.addSchool}>Add new school</button>\r\n                    </form>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddSchool;","import { Component } from 'react';\r\nimport firebase from './Firebase.js';\r\nimport Swal from 'sweetalert2'\r\n\r\nclass Favourite extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            schoolNotes: '',\r\n            schoolId: ''\r\n        }\r\n    }\r\n\r\n    removeSchool = (schoolRef) => {\r\n        const dbFavouritesRef = firebase.database().ref('Favourites');\r\n        dbFavouritesRef.child(schoolRef).remove();\r\n        Swal.fire({\r\n            title: \"Institution Removed\",\r\n            text: \"Your favourite list has been updated\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n        })\r\n    }\r\n\r\n    handleAddNotes = (schoolId) => {\r\n        const dbFavouritesRef = firebase.database().ref('Favourites')\r\n        dbFavouritesRef.child(schoolId).update({ schoolNotes: this.state.schoolNotes });\r\n       this.setState({\r\n           schoolNotes: ''\r\n       })\r\n        Swal.fire({\r\n            title: \"Note Added\",\r\n            text: \"Added\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Ok\",\r\n        })\r\n    }\r\n\r\n   render() { \r\n       const {id, schoolName, schoolAddress, schoolNotes} = this.props.school;\r\n       return (\r\n           <>\r\n           {/* <li key={id}>\r\n               <h3>{schoolName}</h3>\r\n               <p>{schoolAddress}</p>\r\n               <p><span>Notes: </span>{schoolNotes}</p>\r\n               <label htmlFor=\"notes\">Notes</label>\r\n               <textarea value={this.state.schoolNotes} name=\"notes\" id=\"notes\" onChange={(event) => this.setState({schoolNotes: event.target.value, schoolId: id })}></textarea>\r\n               <button onClick={() => { this.handleAddNotes(id) }}>Add Notes</button>\r\n               <button onClick>Edit Notes</button>\r\n               <button onClick={() => { this.removeSchool(id) }}>Remove School</button>\r\n           </li> */}\r\n       \r\n           \r\n           <li key={id} className=\"favoritesFlex\">\r\n                   <h3>{schoolName}</h3>\r\n                   <p>{schoolAddress}</p>\r\n                   <p><span>Notes: </span>{schoolNotes}</p>\r\n                   <label htmlFor=\"notes\" className=\"srOnly\">Notes: type below to add</label>\r\n                   <textarea placeholder=\"Type here to add notes\" value={this.state.schoolNotes} name=\"notes\" id=\"notes\" onChange={(event) => this.setState({schoolNotes: event.target.value, schoolId: id })}></textarea>\r\n                   <div className=\"buttonFlex\">\r\n                   <button onClick={() => { this.handleAddNotes(id) }}>Add Notes</button>\r\n                   <button onClick={() => { this.removeSchool(id) }}>Remove School</button>\r\n                   </div>\r\n               </li>\r\n            </>\r\n           )\r\n   }\r\n}\r\nexport default Favourite;","import { Component, Fragment } from 'react';\r\nimport firebase from './Firebase.js';\r\nimport Favourite from './Favourite.js';\r\n\r\nclass Favourites extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state ={\r\n            favourites: [],\r\n            schoolNotes: '',\r\n            schoolId: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const dbRef = firebase.database().ref();\r\n\r\n        dbRef.on('value', (data) => {\r\n            const firebaseDataObj = data.val();\r\n            const favouritesObject = firebaseDataObj.Favourites;\r\n\r\n            let favouritesArray = [];\r\n            let userFavourite;\r\n\r\n            for (let schoolId in favouritesObject) {\r\n                userFavourite = favouritesObject[schoolId];\r\n                userFavourite.id = schoolId; \r\n                userFavourite.notes = this.state.schoolNotes\r\n                favouritesArray.push(userFavourite);\r\n            }\r\n\r\n            this.setState({\r\n                favourites: favouritesArray\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n   render() { \r\n       return (\r\n           <Fragment>\r\n               <div className=\"favorites\">\r\n               <h2>Favourites</h2>\r\n               <ul>\r\n               {\r\n                   this.state.favourites.map((school) => {\r\n                       return(\r\n                        <Fragment>\r\n                            <Favourite \r\n                            school={school}\r\n                            />\r\n                        </Fragment>\r\n                       )\r\n                   })\r\n               }\r\n               </ul>\r\n               </div>\r\n           </Fragment>\r\n       )\r\n   }\r\n}\r\nexport default Favourites;","const { Fragment } = require(\"react\");\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n        <p>Juno College 2020 Created by <span><a href=\"https://clarkemacarthur.com/\">Clarke</a>, <a href=\"http://erzhena.ca/\">Erzhena</a>, <a href=\"https://www.harrydarwin.com/\">Harry</a> and <a href=\"https://kylekodes.com/\">Kyle</a> &#169;</span></p>\r\n\r\n        <p><span>Photo by <a href=\"https://unsplash.com/@iemyoung?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Emily Karakis</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\n// adding react scroll library\r\nimport { animateScroll as scroll, scroller } from \"react-scroll\";\r\nimport Swal from 'sweetalert2';\r\nimport axios from 'axios';\r\nimport firebase from './Firebase.js';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport Header from './Header.js';\r\nimport SearchResults from './SearchResults.js';\r\nimport './App.css';\r\nimport AddSchool from './AddSchool';\r\nimport Favourites from './Favourites.js';\r\nimport Footer from './Footer.js';\r\n\r\n\r\nlet city = \"\";\r\nlet country = \"\";\r\nlet mapSearches = [];\r\nlet longLats = [];\r\n\r\nconst testArray = ['1234 Yonge Street, Toronto, Ontario M4T 1W2, Canada', '424 Yonge Street, Suite 200, Toronto ON M5B 2H4, Canada', '487 Adelaide St W, Unit 100 (Portland), Toronto ON, Canada'];\r\nmapboxgl.accessToken = `pk.eyJ1IjoiaGFycnlndWxvaWVuIiwiYSI6ImNrazQ2bmFuYTE2c2MydnBiZW5mcDVnaHYifQ.QPjai4qdHOKRY8qHYt1QVw`;\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      schoolResults: [],\r\n      favourites: [],\r\n      radius: '',\r\n      schoolTypeId: '',\r\n      cityInput: '',\r\n      countryInput: '',\r\n      formattedAddress: [],\r\n      newSchool: [],\r\n      favouriteLength: '',\r\n      isActive: false,\r\n      directMeHome: false,\r\n      mapLocations: [],\r\n      longLatLocations: [],\r\n      locationCoordinates: [],\r\n    }\r\n  }\r\n\r\n// scroll to element function\r\n scrollTo() {\r\n    scroller.scrollTo('scroll-to-element', {\r\n      duration: 800,\r\n      delay: 0,\r\n      smooth: 'easeInOutQuart'\r\n    })\r\n  }\r\n\r\n  \r\n\r\n getData = () => {\r\n  //Grab data from API\r\n   this.apiCall();\r\n  //Grab data from firebase\r\n   this.fireBaseCall();\r\n  //  scrolls to search results when API call is made\r\n  this.scrollTo();\r\n  \r\n  // testArray.forEach(school => this.mapData(school));\r\n  this.mapData(`${this.state.cityInput} ${this.state.countryInput}`)\r\n   \r\n }\r\n\r\n\r\n\r\n\r\n handleSubmit = (e) => {\r\n   e.preventDefault();\r\n   this.getData();\r\n   this.setState({\r\n     directMeHome: true\r\n   })\r\n }\r\n\r\n handleSchoolType = (e) => {\r\n   this.setState({\r\n     schoolTypeId: e.target.value\r\n   })\r\n }\r\n\r\n handleRadius = (e) => {\r\n   this.setState({\r\n     radius: e.target.value\r\n   })\r\n }\r\n\r\n handleCityInput = (e) => {\r\n  this.setState({\r\n    cityInput: e.target.value\r\n  })\r\n }\r\n\r\n handleCountryInput = (e) => {\r\n   this.setState({\r\n     countryInput: e.target.value\r\n   })\r\n }\r\n\r\n  fireBaseCall() {\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on('value', (data) => {\r\n      const firebaseDataObj = data.val();\r\n      const newSchoolObject = firebaseDataObj.NewSchools;\r\n\r\n      // create and store usable, formatted firebase data \r\n      let newSchoolArray = formatFirebaseData(newSchoolObject);\r\n      // convert and store API school type id (long alphanumeric string) to english school type for usable comparison\r\n      let userSchoolType = this.convertCategoryIdToName();\r\n\r\n      // filter firebase formatted school data by comparing school type with usr chosen school type and return results in an array\r\n      const filteredNewSchoolArray = this.compareUserInputAndCreateResultsArray(newSchoolArray, userSchoolType);\r\n      filteredNewSchoolArray.forEach(school => {\r\n        const address = school.schoolAddress.join();\r\n        mapSearches.push(address);\r\n      })\r\n      console.log({mapSearches});\r\n      //store results in state\r\n      this.setState({\r\n        newSchool: filteredNewSchoolArray\r\n      });\r\n    });\r\n    // store in variables to pass as props\r\n    city = this.state.cityInput;\r\n    country = this.state.countryInput;\r\n  }\r\n\r\n  mapData(query) {\r\n    axios({\r\n      method: 'GET',\r\n      responseType: 'json',\r\n      url: `https://api.mapbox.com/geocoding/v5/mapbox.places/${query}.json?`,\r\n      params: {\r\n        access_token: mapboxgl.accessToken,\r\n        \r\n      }\r\n    }).then((res) => {\r\n    const possibleLocations = res.data.features;\r\n\r\n    const ourLocation = possibleLocations[0].geometry.coordinates;\r\n    this.setState({\r\n      locationCoordinates: ourLocation\r\n    })\r\n   console.log({ourLocation})\r\n  });\r\n  }\r\n\r\n  compareUserInputAndCreateResultsArray(newSchoolArray, userSchoolType) {\r\n    return newSchoolArray.filter((object => {\r\n\r\n      //  making inputs and comparison case sensitive\r\n      const addedSchoolCity = object.schoolAddress[1].toLowerCase();\r\n      const addedSchoolCountry = object.schoolAddress[2].toLowerCase();\r\n      \r\n      return ((object.schoolType === userSchoolType) && addedSchoolCity.includes(this.state.cityInput.toLowerCase()) && addedSchoolCountry.includes(this.state.countryInput.toLowerCase())) || ((object.schoolType === userSchoolType) && addedSchoolCity.includes(this.state.cityInput.toLowerCase()) && addedSchoolCity.includes(this.state.cityInput.toLowerCase()))\r\n    })\r\n    );\r\n  }\r\n\r\n  convertCategoryIdToName() {\r\n    let userSchoolType = '';\r\n    if (this.state.schoolTypeId === '4bf58dd8d48988d1ae941735') {\r\n      userSchoolType = 'University';\r\n    } else if (this.state.schoolTypeId === '4bf58dd8d48988d1a2941735') {\r\n      userSchoolType = 'Community College';\r\n    } else if (this.state.schoolTypeId === '4bf58dd8d48988d1ad941735') {\r\n      userSchoolType = 'Trade School';\r\n    }\r\n    return userSchoolType;\r\n  }\r\n\r\n  // API call function which draws data from the API and handles errors if data is not found \r\n  apiCall() {\r\n    axios({\r\n      method: 'GET',\r\n      responseType: 'json',\r\n      url: 'https://api.foursquare.com/v2/venues/search',\r\n      params: {\r\n        client_id: 'SMUUEFGVRENHIW3EQX5ICCFCTNQPPIWVXP21E2BQVRH421OF',\r\n        client_secret: 'EVNPHQ3EYKNQKZMOAKRVUTT0KDHXXGNUWUCY0LFZTVRE2BAF',\r\n        near: this.state.cityInput + \" \" + this.state.countryInput,\r\n        categoryId: this.state.schoolTypeId,\r\n        radius: this.state.radius,\r\n        v: 20201205\r\n      }\r\n    }).then((res) => {\r\n      const dataArray = res.data.response.venues;\r\n\r\n      const filteredArray = ourCategoryFilter(dataArray);\r\n      longLats = [];\r\n      console.log({filteredArray})\r\n      filteredArray.forEach(school => {\r\n        longLats.push(school)\r\n      })\r\n\r\n      console.log({longLats});\r\n\r\n      this.setState({\r\n        schoolResults: filteredArray,\r\n        isActive: true\r\n      });\r\n\r\n    }).catch((err) => {\r\n      this.setState({\r\n        isActive: false\r\n      });\r\n      Swal.fire({\r\n        title: \"No schools found\",\r\n        text: \"Please Try Another City and Province/Country\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"Ok\",\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return(\r\n      <Router>\r\n        \r\n        <Header\r\n        schoolHandler={this.handleSchoolType}\r\n        radiusHandler={this.handleRadius}\r\n        handleCityInput={this.handleCityInput}\r\n        handleCountryInput={this.handleCountryInput}\r\n        submitHandler={this.handleSubmit}\r\n        />\r\n        <div className=\"wrapper\">\r\n        {this.state.isActive \r\n            ? <Route exact path=\"/searchResults\" render={() => {\r\n          return (\r\n            <>\r\n            <SearchResults \r\n              schoolResults = {this.state.schoolResults}\r\n              schoolsAdded = {this.state.newSchool}\r\n              userCityInput = {city}\r\n              userCountryInput = {country}\r\n              location = {this.state.locationCoordinates}\r\n              mapPoints = {longLats}\r\n              />\r\n            </>\r\n          )\r\n        }\r\n         }/>  : null \r\n      } \r\n\r\n        <Route path=\"/addSchool\" component={AddSchool} /> \r\n        <Route path=\"/favourites\" component={Favourites} /> \r\n        </div>\r\n        <Footer />\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n\r\n\r\n// Formats user input schools from firebase into identical objects with ID's and pushes formatted objects to new array\r\nfunction formatFirebaseData(newSchoolObject) {\r\n  let newSchoolArray = [];\r\n  let userNewSchool;\r\n\r\n  for (let schoolId in newSchoolObject) {\r\n    userNewSchool = newSchoolObject[schoolId];\r\n    userNewSchool.id = schoolId;\r\n\r\n    newSchoolArray.push(userNewSchool);\r\n  }\r\n  return newSchoolArray;\r\n}\r\n\r\n// Function to filter our data by category type matching the user selection - ie: university, college or trade school \r\nfunction ourCategoryFilter(dataArray) {\r\n  return dataArray.filter((object => {\r\n    return object.name.includes(\"University\") || object.categories[0].name === \"Community College\" || object.categories[0].name === \"Trade School\" && object.location.formattedAddress.length > 2;\r\n  })\r\n  );\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}